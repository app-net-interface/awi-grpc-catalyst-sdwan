// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/app-net-interface/catalyst-sdwan-app-client/vmanage (interfaces: Client,ACL,Connection,Device,Feature,VPN,VPC,Status,Site,Policy)

// Package mock_vmanage is a generated GoMock package.
package mock_vmanage

import (
	"context"
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/app-net-interface/catalyst-sdwan-app-client/acl"
	"github.com/app-net-interface/catalyst-sdwan-app-client/common"
	"github.com/app-net-interface/catalyst-sdwan-app-client/connection"
	"github.com/app-net-interface/catalyst-sdwan-app-client/device"
	"github.com/app-net-interface/catalyst-sdwan-app-client/feature"
	"github.com/app-net-interface/catalyst-sdwan-app-client/policy"
	"github.com/app-net-interface/catalyst-sdwan-app-client/site"
	"github.com/app-net-interface/catalyst-sdwan-app-client/vmanage"
	"github.com/app-net-interface/catalyst-sdwan-app-client/vpc"
	"github.com/app-net-interface/catalyst-sdwan-app-client/vpn"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ACL mocks base method.
func (m *MockClient) ACL() vmanage.ACL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACL")
	ret0, _ := ret[0].(vmanage.ACL)
	return ret0
}

// ACL indicates an expected call of ACL.
func (mr *MockClientMockRecorder) ACL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACL", reflect.TypeOf((*MockClient)(nil).ACL))
}

// Connection mocks base method.
func (m *MockClient) Connection() vmanage.Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection")
	ret0, _ := ret[0].(vmanage.Connection)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockClientMockRecorder) Connection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockClient)(nil).Connection))
}

// Device mocks base method.
func (m *MockClient) Device() vmanage.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Device")
	ret0, _ := ret[0].(vmanage.Device)
	return ret0
}

// Device indicates an expected call of Device.
func (mr *MockClientMockRecorder) Device() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Device", reflect.TypeOf((*MockClient)(nil).Device))
}

// Feature mocks base method.
func (m *MockClient) Feature() vmanage.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feature")
	ret0, _ := ret[0].(vmanage.Feature)
	return ret0
}

// Feature indicates an expected call of Feature.
func (mr *MockClientMockRecorder) Feature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feature", reflect.TypeOf((*MockClient)(nil).Feature))
}

// GetToken mocks base method.
func (m *MockClient) GetToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetToken indicates an expected call of GetToken.
func (mr *MockClientMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockClient)(nil).GetToken))
}

// Login mocks base method.
func (m *MockClient) Login(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockClientMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClient)(nil).Login), arg0, arg1, arg2)
}

// Policy mocks base method.
func (m *MockClient) Policy() vmanage.Policy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Policy")
	ret0, _ := ret[0].(vmanage.Policy)
	return ret0
}

// Policy indicates an expected call of Policy.
func (mr *MockClientMockRecorder) Policy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Policy", reflect.TypeOf((*MockClient)(nil).Policy))
}

// SetToken mocks base method.
func (m *MockClient) SetToken(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToken", arg0)
}

// SetToken indicates an expected call of SetToken.
func (mr *MockClientMockRecorder) SetToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockClient)(nil).SetToken), arg0)
}

// Site mocks base method.
func (m *MockClient) Site() vmanage.Site {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Site")
	ret0, _ := ret[0].(vmanage.Site)
	return ret0
}

// Site indicates an expected call of Site.
func (mr *MockClientMockRecorder) Site() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Site", reflect.TypeOf((*MockClient)(nil).Site))
}

// Status mocks base method.
func (m *MockClient) Status() vmanage.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(vmanage.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockClientMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockClient)(nil).Status))
}

// VPC mocks base method.
func (m *MockClient) VPC() vmanage.VPC {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VPC")
	ret0, _ := ret[0].(vmanage.VPC)
	return ret0
}

// VPC indicates an expected call of VPC.
func (mr *MockClientMockRecorder) VPC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VPC", reflect.TypeOf((*MockClient)(nil).VPC))
}

// VPN mocks base method.
func (m *MockClient) VPN() vmanage.VPN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VPN")
	ret0, _ := ret[0].(vmanage.VPN)
	return ret0
}

// VPN indicates an expected call of VPN.
func (mr *MockClientMockRecorder) VPN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VPN", reflect.TypeOf((*MockClient)(nil).VPN))
}

// MockACL is a mock of ACL interface.
type MockACL struct {
	ctrl     *gomock.Controller
	recorder *MockACLMockRecorder
}

// MockACLMockRecorder is the mock recorder for MockACL.
type MockACLMockRecorder struct {
	mock *MockACL
}

// NewMockACL creates a new mock instance.
func NewMockACL(ctrl *gomock.Controller) *MockACL {
	mock := &MockACL{ctrl: ctrl}
	mock.recorder = &MockACLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockACL) EXPECT() *MockACLMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockACL) Create(arg0 context.Context, arg1 *acl.Input) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockACLMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockACL)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockACL) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockACLMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockACL)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockACL) Get(arg0 context.Context, arg1 string) (*acl.ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*acl.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockACLMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockACL)(nil).Get), arg0, arg1)
}

// GetByName mocks base method.
func (m *MockACL) GetByName(arg0 context.Context, arg1 string) (*acl.ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(*acl.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockACLMockRecorder) GetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockACL)(nil).GetByName), arg0, arg1)
}

// List mocks base method.
func (m *MockACL) List(arg0 context.Context) ([]*acl.ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*acl.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockACLMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockACL)(nil).List), arg0)
}

// Update mocks base method.
func (m *MockACL) Update(arg0 context.Context, arg1 string, arg2 *acl.Input) (*common.UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*common.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockACLMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockACL)(nil).Update), arg0, arg1, arg2)
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockConnection) Create(arg0 context.Context, arg1 *connection.Parameters) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConnectionMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConnection)(nil).Create), arg0, arg1)
}

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDevice) Get(arg0 context.Context, arg1 string) (*device.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*device.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeviceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDevice)(nil).Get), arg0, arg1)
}

// GetAttachedDevices mocks base method.
func (m *MockDevice) GetAttachedDevices(arg0 context.Context, arg1 string) ([]*device.AttachedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachedDevices", arg0, arg1)
	ret0, _ := ret[0].([]*device.AttachedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachedDevices indicates an expected call of GetAttachedDevices.
func (mr *MockDeviceMockRecorder) GetAttachedDevices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachedDevices", reflect.TypeOf((*MockDevice)(nil).GetAttachedDevices), arg0, arg1)
}

// GetByName mocks base method.
func (m *MockDevice) GetByName(arg0 context.Context, arg1 string) (*device.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(*device.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockDeviceMockRecorder) GetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockDevice)(nil).GetByName), arg0, arg1)
}

// GetFromSite mocks base method.
func (m *MockDevice) GetFromSite(arg0 context.Context, arg1 string) (*device.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromSite", arg0, arg1)
	ret0, _ := ret[0].(*device.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromSite indicates an expected call of GetFromSite.
func (mr *MockDeviceMockRecorder) GetFromSite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromSite", reflect.TypeOf((*MockDevice)(nil).GetFromSite), arg0, arg1)
}

// List mocks base method.
func (m *MockDevice) List(arg0 context.Context) ([]*device.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*device.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDeviceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDevice)(nil).List), arg0)
}

// PushConfiguration mocks base method.
func (m *MockDevice) PushConfiguration(arg0 context.Context, arg1 []*device.AttachedDevice, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushConfiguration", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushConfiguration indicates an expected call of PushConfiguration.
func (mr *MockDeviceMockRecorder) PushConfiguration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushConfiguration", reflect.TypeOf((*MockDevice)(nil).PushConfiguration), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockDevice) Update(arg0 context.Context, arg1 *device.Template) (*device.UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*device.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeviceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDevice)(nil).Update), arg0, arg1)
}

// MockFeature is a mock of Feature interface.
type MockFeature struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureMockRecorder
}

// MockFeatureMockRecorder is the mock recorder for MockFeature.
type MockFeatureMockRecorder struct {
	mock *MockFeature
}

// NewMockFeature creates a new mock instance.
func NewMockFeature(ctrl *gomock.Controller) *MockFeature {
	mock := &MockFeature{ctrl: ctrl}
	mock.recorder = &MockFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeature) EXPECT() *MockFeatureMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFeature) Create(arg0 context.Context, arg1 *feature.TemplateInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFeatureMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFeature)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockFeature) Get(arg0 context.Context, arg1 string) (*feature.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*feature.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFeatureMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFeature)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockFeature) List(arg0 context.Context) ([]*feature.TemplateInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*feature.TemplateInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFeatureMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFeature)(nil).List), arg0)
}

// ListByType mocks base method.
func (m *MockFeature) ListByType(arg0 context.Context, arg1 string) ([]*feature.TemplateInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByType", arg0, arg1)
	ret0, _ := ret[0].([]*feature.TemplateInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByType indicates an expected call of ListByType.
func (mr *MockFeatureMockRecorder) ListByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByType", reflect.TypeOf((*MockFeature)(nil).ListByType), arg0, arg1)
}

// Update mocks base method.
func (m *MockFeature) Update(arg0 context.Context, arg1 string, arg2 *feature.Template) (*common.UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*common.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFeatureMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFeature)(nil).Update), arg0, arg1, arg2)
}

// MockVPN is a mock of VPN interface.
type MockVPN struct {
	ctrl     *gomock.Controller
	recorder *MockVPNMockRecorder
}

// MockVPNMockRecorder is the mock recorder for MockVPN.
type MockVPNMockRecorder struct {
	mock *MockVPN
}

// NewMockVPN creates a new mock instance.
func NewMockVPN(ctrl *gomock.Controller) *MockVPN {
	mock := &MockVPN{ctrl: ctrl}
	mock.recorder = &MockVPNMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPN) EXPECT() *MockVPNMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockVPN) List(arg0 context.Context, arg1 string) ([]*vpn.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*vpn.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVPNMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVPN)(nil).List), arg0, arg1)
}

// MockVPC is a mock of VPC interface.
type MockVPC struct {
	ctrl     *gomock.Controller
	recorder *MockVPCMockRecorder
}

// MockVPCMockRecorder is the mock recorder for MockVPC.
type MockVPCMockRecorder struct {
	mock *MockVPC
}

// NewMockVPC creates a new mock instance.
func NewMockVPC(ctrl *gomock.Controller) *MockVPC {
	mock := &MockVPC{ctrl: ctrl}
	mock.recorder = &MockVPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPC) EXPECT() *MockVPCMockRecorder {
	return m.recorder
}

// CreateVPCTag mocks base method.
func (m *MockVPC) CreateVPCTag(arg0 context.Context, arg1 string, arg2 *vpc.VPC) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPCTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPCTag indicates an expected call of CreateVPCTag.
func (mr *MockVPCMockRecorder) CreateVPCTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPCTag", reflect.TypeOf((*MockVPC)(nil).CreateVPCTag), arg0, arg1, arg2)
}

// DeleteVPCTag mocks base method.
func (m *MockVPC) DeleteVPCTag(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPCTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVPCTag indicates an expected call of DeleteVPCTag.
func (mr *MockVPCMockRecorder) DeleteVPCTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPCTag", reflect.TypeOf((*MockVPC)(nil).DeleteVPCTag), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockVPC) Get(arg0 context.Context, arg1, arg2 string) (*vpc.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*vpc.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVPCMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVPC)(nil).Get), arg0, arg1, arg2)
}

// GetByName mocks base method.
func (m *MockVPC) GetByName(arg0 context.Context, arg1, arg2 string) (*vpc.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*vpc.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockVPCMockRecorder) GetByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockVPC)(nil).GetByName), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockVPC) List(arg0 context.Context, arg1 string) ([]*vpc.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*vpc.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVPCMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVPC)(nil).List), arg0, arg1)
}

// ListWithParameters mocks base method.
func (m *MockVPC) ListWithParameters(arg0 context.Context, arg1 *vpc.ListVPCParameters) ([]*vpc.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithParameters", arg0, arg1)
	ret0, _ := ret[0].([]*vpc.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithParameters indicates an expected call of ListWithParameters.
func (mr *MockVPCMockRecorder) ListWithParameters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithParameters", reflect.TypeOf((*MockVPC)(nil).ListWithParameters), arg0, arg1)
}

// ListWithTag mocks base method.
func (m *MockVPC) ListWithTag(arg0 context.Context, arg1 string) ([]*vpc.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithTag", arg0, arg1)
	ret0, _ := ret[0].([]*vpc.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithTag indicates an expected call of ListWithTag.
func (mr *MockVPCMockRecorder) ListWithTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithTag", reflect.TypeOf((*MockVPC)(nil).ListWithTag), arg0, arg1)
}

// ListWithTagWithParameters mocks base method.
func (m *MockVPC) ListWithTagWithParameters(arg0 context.Context, arg1 *vpc.ListVPCTagParameters) ([]*vpc.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithTagWithParameters", arg0, arg1)
	ret0, _ := ret[0].([]*vpc.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithTagWithParameters indicates an expected call of ListWithTagWithParameters.
func (mr *MockVPCMockRecorder) ListWithTagWithParameters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithTagWithParameters", reflect.TypeOf((*MockVPC)(nil).ListWithTagWithParameters), arg0, arg1)
}

// MockStatus is a mock of Status interface.
type MockStatus struct {
	ctrl     *gomock.Controller
	recorder *MockStatusMockRecorder
}

// MockStatusMockRecorder is the mock recorder for MockStatus.
type MockStatusMockRecorder struct {
	mock *MockStatus
}

// NewMockStatus creates a new mock instance.
func NewMockStatus(ctrl *gomock.Controller) *MockStatus {
	mock := &MockStatus{ctrl: ctrl}
	mock.recorder = &MockStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatus) EXPECT() *MockStatusMockRecorder {
	return m.recorder
}

// ActionStatusLongPoll mocks base method.
func (m *MockStatus) ActionStatusLongPoll(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionStatusLongPoll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionStatusLongPoll indicates an expected call of ActionStatusLongPoll.
func (mr *MockStatusMockRecorder) ActionStatusLongPoll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionStatusLongPoll", reflect.TypeOf((*MockStatus)(nil).ActionStatusLongPoll), arg0, arg1)
}

// MockSite is a mock of Site interface.
type MockSite struct {
	ctrl     *gomock.Controller
	recorder *MockSiteMockRecorder
}

// MockSiteMockRecorder is the mock recorder for MockSite.
type MockSiteMockRecorder struct {
	mock *MockSite
}

// NewMockSite creates a new mock instance.
func NewMockSite(ctrl *gomock.Controller) *MockSite {
	mock := &MockSite{ctrl: ctrl}
	mock.recorder = &MockSiteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSite) EXPECT() *MockSiteMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSite) Get(arg0 context.Context, arg1 string) (*site.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*site.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSiteMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSite)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockSite) List(arg0 context.Context) ([]*site.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*site.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSiteMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSite)(nil).List), arg0)
}

// MockPolicy is a mock of Policy interface.
type MockPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyMockRecorder
}

// MockPolicyMockRecorder is the mock recorder for MockPolicy.
type MockPolicyMockRecorder struct {
	mock *MockPolicy
}

// NewMockPolicy creates a new mock instance.
func NewMockPolicy(ctrl *gomock.Controller) *MockPolicy {
	mock := &MockPolicy{ctrl: ctrl}
	mock.recorder = &MockPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicy) EXPECT() *MockPolicyMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPolicy) Create(arg0 context.Context, arg1 *policy.Input) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPolicyMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPolicy)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPolicy) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPolicyMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPolicy)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockPolicy) Get(arg0 context.Context, arg1 string) (*policy.Input, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*policy.Input)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPolicyMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPolicy)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockPolicy) List(arg0 context.Context) ([]*policy.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*policy.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPolicyMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPolicy)(nil).List), arg0)
}
